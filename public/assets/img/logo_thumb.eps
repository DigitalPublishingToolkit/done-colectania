%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.4 (Build 17E150g) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 79 92
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 79 92
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: KZLSZQ+AGaramondPro-Regular
%!FontType1-1.0: KZLSZQ+AGaramondPro-Regular 2.000%%CreationDate: 2/19/18% Copyright 2018 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (2.000) readonly def/FullName (Adobe Garamond Pro Regular) readonly def/FamilyName (Adobe Garamond Pro) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /KZLSZQ+AGaramondPro-Regular def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /P putreadonly def/FontBBox {-183 -354 1355 917} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF50FFE512C96F7996DDA347ED303164D43FB82E6A113B0782814EC91014D912DDAEB170806A5C4D88AE0C2DEF39D6E4234B143E3C803A13655CBBBF0944FABB747F9275D45682F777DF49DFD7B18A910380B95E582968704F9299649C4C6A3A6156CBD0C88B74F2415759DEF5143165D946F1B74D3912C810B1BE6CE63403518D70A123D4CADDABA30CFDA8A4345428B11300F2327BD4BEB5C8F7D347439BEB5B5C324F8C7CC49716ACB5C47F57726CA578FA2017A0E046AFACC03A5E216B3038976BD69C9A2FF904656B586758E742B97C2EB59C58C0B31A72FA02AC5393D93B5D7473734DFDC6701B7DDACC794E55FB0C6AE9877A47B6A8482B630A98F0C5A3885ECADB39F98A9500613FDE404ADA7D3163198DE5A3222871B5E25873EE85528813E005BE654354B19AC3971FA56E966C385D9DEDE7E248A67EC82A4241A11B2712B1453D1C4DCF71CB358F3B2F4D589A70E683DFD778D53B50EAFAB819D47AADA100D9D43D2CA929CD0CF5F360B4059B5FDF36D43BFB3FE9886F0C872B071D4D467FEFBEEB48895D8026AEE2E9D1535188B3C4290CF07960F205F421C2BE6084E84C770CACF4CF2A73EACDA44D9326C1DFCFD0834CECD6927518FA319165787D8CC7A13C519BE3BF10A921A0097A1208144B3AA2F2A43F4CDFFC5696DEBBE5AE0C78D26E3BEABDD4427BB2FACB517CFD176BF17446E9F54F15E3F28868F5B4C10276B87431ACE16CE1341933D34EC52789AB13881E37FFBE9771C4F5535BDE5BB5AB3FA1F9CCC09118F57EAA98AA55C230DA3797B683473A865E5FE859776BCE60636656302256B3A1201816B4FC28F8DEFCE37218E3327A9E2C82C288D14DA82F31ECB773947921EFA5D184F769102CF68C46AB21A6E789D02CF789C1E54206726349F6DA1ED921E67D8038E4ECC5F073AC610E48C30E354E2981A5F98062C3DE6385975C3C4774981081E2BD092F110F83B182C7C4C6539B26F1E04537D4D93BF8F33F30BD6156E63AA7999EB6FF0C19EEAA068A197A055AEE9A1AFE9BD8AB1E30427CC953D39A790E2F62DFBAEB63AC4B9CC19490610B5FBECA010F4B33609ED2E33C561AE3C7C4F79971F73B6EDB8276D35E89CF1CC2A2A872BCE1BEB96CF2D8AD459481334F0C9ECB1363F622903EDA95BF9E3760A16A41C88CBF4258373F477C327A3FD52126C9BD6EF362B5892CF14A2F12318A79987D5206B5E145C475673CDF3841165154057290DF6A25759C90874318F34D3B0958454439A5627D1AF4683E120C3CCEDC46C8ADCA8817A1BE56A4722DFF69F2A344991CDC88A5BA95B6A48DC8EF16C8E545794C9A82C501C085E4AAC6CE12F08312890114079EE71DE04664135E681B975468A26641F5AC11BB9A7270DF513E7F7E8C3BA493D0902A0D9099CFC69786197BEEF511C4606290481A6C69618C54C57B28B68367BC9BF512CFAACDCA1A09ED3DCB0E6AEF6EC020098F12F321563B05D7635149986107159873B830299101FCF20AA7ED0EB233E5CC90733CDF873DAF58BF1D0F169C3C29EBC96E4DDCD2BAD2DA84CA8D83C5CCB20FAFBC618A6D04173474C46F4A5FCA05559071B03CBD4DC4BA296311D0DC742A6A177D2C363A461833D3789ED7D7A296D7C70190875F04613F2443070E1D573339A854E5D182D04F94A79CC63593695BA160CCFF1FA7CAD3CDB58815A91D020882AA36C1A71F9F1C3098739F3CEC710DCA438F75CEC2E48D2033E03387FD597B0D0FFD78F35BDBB967A39EB642D733AF47A19F5C5920F1AAB22AD4292B47B5F9A924A09B212B2F33BCB858B10DD7F4404AD20F659B8742F8718A9225D5125FF5C14B00DB1BA235442B095EAF22D40E357FD40CBFE39136C8A25A920880B017F92C03E890D28A8B6F66C661CE78A705FD0B420C6027DD1AB8FDADAF5C0A05815899BED8BB771253D6F04B0B6209C19EC0569AE9CD497E847B9E3C68619E6349D8DAC7FF86DBFCC7CC7F5BD147F7A52E76A4C73F0390DF13D11457D9D3E92A3C3DF6EB0978E81D81560DA415E2A7BA79CE032ED3F1E8E8A6613FF3A2E66722B84D6B31D5E1AA58B565C028B0C480EB7EB900C1CCD9987F76C3ABC3616320EAE541094DD57CD5F180791BBD57ACF34FC21719A8DF22421D070A5BBB0A651B87CBF1177E71FFE33A5B7EE61F42AF44E6243C82C2531E6BEEE8DBA70282785A143CB8F8B3B512CC7A8DFE16FDE2D545EC0DA3C2B21BB1A579182D830D2966EBE0991653806D6FC5FEECFFBA3FA14E48E8571175368BCB10C85A9618DF01C26C314E1D8644D95DCA6D2E39892FD9843642A220754A4458CAA0402A5ED3A9ECF5122297DD05B77AD6CA67AA25679EC007BA9E02256338694BE267F8595B18AAB28189FAF1E260240DC7927F77140D2863FEA23C9897C96A2D58635BFB97D9733E77C2244595106CEB24D4F681F91049F724B133822056AA177FA04CD77079ACB1A68FF4D1A2674635F1A43F37396E20792FD7768A7B3254DED0894C689172E392F2BAD618BE9682EFC46BC2ECBA00E6B1F1F8BCC165603F778A09A18650EB9CD0F3D46AD8CFB581DBAA747CCD57F5C99DBFD141DDF45F634F58D82AD46FB451BAAC2D2363A4553DE64469E9DE3E68EF5C7BEBC8B919328BC2395FE38DBF3E39F87A7C17D21A417A66BD908EEE987AB9BD257C01EF81D5692741B7F644051120008DC4111582147DF6D8C89FED8F7D721AF85195F282976EC76C8607502CD025A3AA07FBB551F2381692BDF615AF4DBD4C46B20265F9254D946DD0EC584B3FAE10ECD95CDBD90820A041C7BAD7709629E1BF03579B0B8C06FCBEE437A3D74C0EFFA009686D67173BF4C533B1A32498670689737C32C77496AE7E80C21CBFE42F680F4EDC4DE3CA5898AC79E72E7E1B3E281EBC572F07D979D16632EA3E4240EC24F2AA7310EB701229F4972A806A236E53032A5F2FC10ECFBC275E676F0AB7D2AFD50FC8F929E7AF1539FF1F561861B2952417E300FBD3FB32F1D1CCD599371D3C57BFA4D5B5E0BFEB8CF76F779A41385A953B484A380E3D16DBF3F32CF2CB03DA587EDF449FAF06C25FA73300EB90BC5565CD9899C69B3C91D010BD733D24BFE9BBFDE930E256E95A4E8A01C42642CD0401E11292304752C76E8A9238CC9D53FD0454E552EFAE3971AF56A07C3255E6EFA3730F73095315E14A5DC5C15F2D005D09BBE5862E70B6CCD7B1B89A612DF244DE8A901192D008DCCE35B55646190E29066301A8DB0E6BA647EE320872E6D931ECCE0F65E49A063D426BAA91BA81CD5F92F0C38E9EC3B647FEA4251A2A7451AC7476C6457E8DE064AB04CA142A92E3F814D40E48593C84811858F8671072088EABCF65519B7236F1EBB044726619255440D134C4B55F8BB9B301A5046EDB134D900238B47EC241642AE3879F95B6789F50C86CE64911DC189770A3C6E9D21BD3ACE6A1C56CDE98EAC256CF2266EDFA1FA8067FEE66EC0C5ED464CB3D664B6C4D0078F74DDC837447964AC55629D91571010A2C288DC20B5BF04011A0FD859946551DBA4F065C5859727A828B8D28D3400EE24A453862BA5A92633AD734ACEFB855980CD5E1BD8574EE4631B55987E66E5C5E753441BC478C39D7E921966588070D8FD28B913A5C15DFDAF49F4A8FACA891C70040558D140AE7D711FA40EFFBCF4AC6068669A4C624D5ECBF804A0A2B28A7187F95F891004F04897A512AFD1FD2DFF4E789C19F54CF3756E4540CB6B8E5D27C0E30E1D6EDFBEAA57C3748783ABA304DE7110DD7FD8E28D45F02DF19DDA8DE1E6EBDEE378CD7E96EF4163097908B4AF476692BFDDBAF65793C9F4F519722B204647AA31D58CACD33638EEE9121755F6BE44F12286224E5AE7B7525936BF3E816A8DDC79077A23482EE2026703786BF22BEBA6DCA013036AD564E4F56C24262FD1B784663BB24A1A8AC133F10592C50773C70A6502DD439FB7E43979FA33BE65F4488397E6F6E46EB0E9A700252B6D89CC78AAA630AD88813920E62CDF8290768DF4449A6BE748B164EF7966AD945F35480CBE662B893F0808440C8DE8236ED6674C0AACCE5C46C48F144F62B488E0AED29007EE2781567D71F98B0ACA4E55CADA87C990607B2DF249FBFAA071217EE8D97DE0731ADA922D18E2C4555855A1F8D0D53C1DE368C9ACADD1EC75CCC70F53A5125BEAA8089FA498F82C50B8A266B6EF4941D27E796DE99F1049CF23A37DC4597B36FC89BC487272DB380C4F5EB7FA298F6A79A847657F954D137F64FF32F48DC1003193058E42BEA2FD3B13FD8CD54CECAB286986577825BE1B33EBD8F9E47EF4E1D45DEF7D3FFF2E405643EC1AFA244CD585C46863F3452167CF93C2BFD09CB72AD545F7DC384437B6D4F3E2804DDF9ADFAE7195A88CAA64B8457D27E68C4CC0C998987B582B7442B8AC5C13C5D210D6DDB5AE8E05499EED88E4E59F881346EEF1BECA2651389A96046EC15840D3DEE47E5136BE841DCCF495B2393330F2071F02F02F51A45A9D544A57EF9F3E540A4B4D17E9287127653F5769729349F8E505B2671AD4B6293AA90AB8C94B5252CB7FE07E54EEBEE39D03D6693335785F26CADE6F236F26685CBDEDA9DA1F6949A2A8C8DC6DDACE7AE33D066E125B8CD8677A483F3456CE9338CA818312405AF25EC40434C1820CA8D8050FCE8BF5A91DF3DA4C4A87BAB87893EEC02EF2CF432A8363A08FDA285396FC1F2D939B2420EFF6B0AC432B48C1EC6FEFC048391DF8FE86903812239B95E41481D17721B98EB3C7FCC49F7466521F257B80BFD0D719C113CE3965DB403BDE8DE7D2CFB345740EBF720A64E5777C93D9296BBC46C76BE626BDB9100EC6446C543B421601BB773CD16F6FDC032529A43CA14CB6FA757F74F236AD32DE9D8B1AB6613854CE1AF82CB209CA4433DF24E7B77C87C2465C43D18C7EE4669F4751FB76DD8E97BF150F040549A30AF6FA6EFF9181B206401FDD6E5791CB798CD0E7BB124080BCE96AC9E1C2D9439A523082EB393FB4A2BE4D1AE012C2399941ACE38AB1AA3A582A9B27D9A8DD757842EA490F65667D632389AA534AC5DF4ABBC8DDBC63378139F79052BB2ADB22F8E0ED041C9F72C4570C75A7D93E5FE0709A43CDBEDF58D6C0CA89085077606A952327558EDD1788E7EF5003A44B4A9F41ED4C4532505F370B6450BA73659C932512A5027635100561C814F4C8A8F9532C8C1C2F3A1D78D267AF3EE47F5E9429F4A1D0D9F8E95AFA770FDF700CBFA80EF689123C9E165E523444DB11B17D83BE821BF897424D6724DF70B89342984194D33F70EA13247561B91D7173BA6FCDAF8364B6B891FC12CF5F3BF7D3EAF8D1C4A8F4424202DB8243A8AE5C10617D33A5AFFE82D5D29D07D07EB693186C3A9BA258BF18EDDD2364CF8A29BA30E5D7E695208F81905D3588DFD9B32A4D681EA1FE8D6BE32AFE35DA3E37F0E8F7C3228DD25BB2616DDB2EDE1D330AF58ADECCD286DF7D7DB5541F67913D572FBA2E7B49E63E5183FA938BD9B1914B9C0101CD02590CED5A7EFE63B9412C158BFBD7E99C7836DA78F2EA329CEF37EAD2A7DFCB91477BDCED1AFCD1B7D0F4611C5C0F6D8B736A6C72742058479F62D152DC23304B1566517CF7BD771265F6EE31757ED4995663EA10F031A88B5A9F1D3CCA978454116B18F160C0305599DC68D8BA1DA5DC30CF7E06695017F8AEEEC327B8E84ED5B6D70EC987852EFD86A00EFAFEE26EC3CC46D6C8F6AE4D438F774A231A7573C1BDCF6EA3DD084C43371D0BACCF066F3C1CCA64843ED15EB02DD47ACA2881FF98C54111DE14062E55309CA846E55C64F3CC565699A516F25016881B084A8C4DFF5EC50959A08115C89E0739CA038CB5AFAF6D3B78E4CFE904F4905E82ED610BFAB56D0895B58CBE7AA9550345B77DF0DFC91BD5CEC032714A56152F1A01221D7AB33B5DAECFD6E40D5E4D6B7D1959713EA055EDD4C51AA3C3F0F10705D137A523147A683B8FE9D242481E18583F991D9C1534835D80C09F2E74223968F39E52322C567395705C99A1054F7F79ABD0C038756FD0B9C1FC42EA71089D46706B881D6147099A8F0A6B0E11CAFC918580F5A44A0B6761AA8E393D5D79FB844B4E3697D41A7DBF365C72588DE407E9C3317824CD54409442793A9FEF8B843BAC296B5BF9177D16DC65F7FCE090C475FF5CB77EE275A15CBC99FCEDA7716B63C4A69D7352C60F7A918B54B77BC78F3B38D7F77BC42960C38A17D88132E5CD072B2796B60500A12A6C6D31CD5AC9FB9B5F8C97EB4FE5992D1116625662CA1456F2ADC70BEDE01DD63FCA3B6A53C9BA47AE6ADAC4F42B869BFB486B15E8A5384582931F084697223EBECF33748049DA9980D70F5A47D50E1EE23D94F77CED5535D017BC5E2B7EF1C38087DD81CABD20B8870D28842F98CA4095AE9D2E657747360E8B4E5DCF3C07BB557F2F207F071CCD23FE01829231CD13EA1F651D532FEAFD549F710D082B2DB308B581036CB7942C3F87D1F6FCD0BA7B88EB3FE837FC47F89DA17D60A1B764C4A4CD757E90095498A8DDF6F2EBDD1DEA7C1A358671B623256235C07917935FBE6E01371619A372A995C514B679125F84FCFBC1020149B815C9292AEB8AA005D3DA208A531B158B98C256DEB9DE810E9A5D2C9B0F46D1921D15618327782A07225A4270616F47E3144ADE0A86C9DBC81478C574F9DFFA007FE6135671CC8E4183BF61AB76D5553552A3DBC8B357F71D1A8A312F9971E942EDA33247311EC0067D96E2220A5DF39882AE15DF9B9B5B86930CAC298424E26929B3D9B713FDC71098C7BEB933147D97CE8E89ED383F48B60B4FC9FA3FD4CF3491F5BD665F4F483D0B3F6C1E6BC7A4FD1F1B9709E313ED70AD3865AA21C838129F78CB3EF85B7D071B29B4396F763A16402102D9F523216AB738E19A55A4BFF71F1B7754F25AF93EF4C99A9BDC03589914D459A4562262F8473307EDA8DA894B7049DA6F85CA8837278728B78633BE07BE7DD15D0FE74AE2720C921ABE3BBF2207C9CE8617E8DC9EA4D765F012E2CD37860F8360A852ECACAA5358339A51F1EA0163891F2117FE5116B66EDC43C54136CF9F278FEE4850F2FA353A9AE2BB15CDC8E67ADD2D4227F55EF18932634F8B473FB813551AF9C40430BF380BBF5CD29685D6CEE3CBC7B4EC196BF642EDCDD0BAF99B5A0DF9A8F3F9654A49E54A36581D9C170078AE58DB5E7834C43085D986E431468620AC9ACCDB1AEDE8E309EDE3725C61CA1E38FFCC3A71F3B995D5775120B6E0DD9937D0859A7CF227FE59457960C1F9AB749723D6FABA7B9852E6F96E181FDCE9500CA1D02EB107D2189D773814B72D401672E2944CAAD2015BFDC37980C0E77A3E073181A22C680B62FD928D73BE8411422D494A59170695B1D2BA805321E8689C7D0A03D18268F8575C03ED145683CAED755E47350D3E37843ED13AE2A1A75469CFEAC917595F28AE346E9334D1E9D18594AB4F9B714A5D4AC1C43F1F89902DF688CC48C9A9A9F7EBDC1867DBF6CCECB29C567B09C04F214D30294597B08BC24D74B750A9F981A1F929EA4E517738E41434E3113122819C67AD75DFFE96E8C732FDD31AC7A6584CD4736FD4C2CC72B2D13A5E9906B7E25F85E82D527E4E50AC3A65BE3D2A6A5BBC9BE8D68012B78741252EBA8C4A162B483DFD009631BD20B07AF37784B7EAC98E9CC4D722EB1FB321B183CCFFD077D52249782F763B1C0667A73742A8ED5F48C351C1A3EA0D73CE18CEFC5B4CF4D535B4DB23B0219A62DE8D91A5BFB6A05C9D5F4722034C3DF7060EE122F58C5E7886F20DF3D94084FABA6ADF5094BD7484F20B2BFD20DC4A274D9F71E75F426B45D56229AD5234E1407FCFD5D4811068A945CC9C1FA4F81A46BDB6586BD61D0E7B0460947A354C8CAA1EE8F3F32B3C7A1CD61E27DD5967246A41385C9E2D41E0C1B96483A562640A1B2B85C22A6274240E31C4F3C0C3166B2121ED6639F91D1D58B05D49CA673252039F53008A04ED952727A6D1B100AFDF7D96F86CF38C83411804AF1E6C6074B8A2246528D4E8FD6F8BD3255183933AAE324ADAEC64049488C39B78E1AEF561B5DAB94DAE398FE324586BCEB8469273CC62033929A8F3627857D2926EEB4B33CB7B43E0F7240DA56DEFD4A79BCDE6E098B7CA52C6E133096F58F73ECCAEA5F3A20C7A0138B7D0F7E5D040BBAFE5D5EECAF2A5DE80BFDCD03F24BA4E32ECF1455DBC3E10101EDF59B446B38B90E2BC116B6EC734D2A0108874FFF22F6DB11A5852AA7B2E0B091263038D2D2458C006DC5A9A888A9C4D0E5EAB18B294D1A37E3EE210DA4EAA14094DB1EF34A74424F1E7F95EEA7202895A8315EC828F77FDF53C83A79BFCE5A73AA2D0813AB238367A94CF252009CFEA4A8A2327A12C2C41FBA94D21A71DDAAAF22F440BF61FF9CB99E2A45D081DA5B719121D35E513711F7844C3D355C1CE7BAE409F518C439590040B410E5AA9BC7F6BF0BF31235D3784538E5DAAAC43A6817CE2F3366FD2484AC116423D6D99E38C4311B228F9869355B11FDEAD3FAEA8164F393372C10BC84B65243A61EDF670EB8017483B4C502679DC1B15B4A87F2B30CF6112D9BB279E45F6FAA3ED50824A37F7CFCEFAE427E98F0D524B54D2DD5F726236DB2AC07D53FEBE5949877EBA9267D39CD95ADBB6C4B14E30726B84310922FF5658860A77770ACC06F8F917A8CF3214B7135994C5A9A6792D02982A2AD533813B1A5D0611FC9F210166EEA7DB636AC2DDB19900D1F51E70871C7FEF1BF30A80DD408596D3C7B0B66600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/KZLSZQ+AGaramondPro-Regular cguidfix
/F1.1/KZLSZQ+AGaramondPro-Regular renmfont
%RBIBeginFontSubset: KNDRRG+Shlop-Regular
%!FontType1-1.0: KNDRRG+Shlop-Regular 1.0000.4.0010
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
14 dict begin/FontName /KNDRRG+Shlop-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /P put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -122 1 index div -294 2 index div 989 3 index div 888 5 -1 roll div]cvx def
/sfnts [<

00>] def
/CharStrings 3 dict dup begin
/.notdef 0 def
/P 1 def
/circumflexhook 2 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 4 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-122 -294 989 888}def
/UniqueID 4225815 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9301CB16965794C1772CA14F06910BCAE9D9B0B498A8D671A1AA6B019D74458AFE2EA37B0AF73FFB43D36BBCAEBFFD52A32CABF2B86653D39B34A357AE3DE0C19829DDA2D103E5325DA2712E58F5237E879A2D0EFFC44527CCAACB970A35A04996F129A3B66F91E096949E3EF7D5D3C4446B42A2BF846718407C40120D939671303811CB6DD73A0BEDC7B76DCA2A8B0CAEF292095E527B24F946EECF502BB9381F14777E022AE0BC8D86641BED65CC0B6E8D33F4A96907DA07B7F1C244EA84D11D4146E269521295156FDD61C71A7EDB6941B8CF59ED563C5C34231FD8A290E445AB9893847B36F31553B8221EFB092A33186059B036120D20C775D14E9FBB7088768B3D35579FBCE242404A6AE1A1F2392931BF091268FB67F062C71646383BB4064074D4BC2806B81D5E004B5721B3880270B4D1D443813616FDD67BBBEE5ED278DE81F64CDDAD5C99724AFDFD8B3D049BED93F2DC55B33012A3C56304CB6C983724A982DAB8E4D0316238C065E1330486CB76B69B3ADA2B9571C44E6178A0A1BF63F095D4715F0E1792FF8E6432D51ED3E0BCB6B856423305D4ACF95D6997A2F4CA76BBF27AC3FBE17147E7E98CA67954FA46DCB2C91710A469CB788E053A4FC6B60D0552A78EA1E86CF8F6C46C8E1D48D16D5002F1A9F3BC20F4D912851C9E7A15863F1F1BDB5DFEAA994324BDC7C7C906031417DEF5697ABB1CDB431FC2FA4699E3D685D2FA0CBF172F685AEAE1A8866B403DB1BF204F472C0A680281B7CE
B0CF090E7473FADD17B1944874ADB3EEDAE444155E22BCA064C02AD35D8A630B1BDDF6DFE93DC417BC5AA6FF78D39E1AD2C80B4C0B19F9A719FBE102E7198CA69F33F3E0E6FEEEEEA3407D125F1BF69E0385C94938EA6327CD1E117A4F5154ED959FE24AAF315BF11EAF34318528F765D8BB92401DE68B38B92C9C34D0BCD8DA3CC3C4E5144C3F23A2F57677869CF3ED4B6C3E12013A53E8131418EE089EE583006895E04320C3D883A4FACAD199117761446BBAD09195598F43E54EF53D4F8DE1EC5658ABA81F836B0BF6AF770DC9ECC39A6B482D1181CED3D897B4C4E51583FE4843F0271E9FF638AA6A41B5F3CFC05BFA15B58ADF9C1A0E9D610E6A2404B422606298B97A0FBB2BA7BD7157D2FE083A7CCE18A67563889E8061D29E7451B28A7997C17E4F840FCBC0103F579552B51567B46E49116840774127835C824CCB97310B994DEA1A2AAA34467F37F23937D31F6EE1C8F93176A6AD156EDF699100DD390CC4C38AC746E3021123BC6A03AECB7758B300231627BAA57373AA889042EC74FB6E5A2D0D3F4BAD8B152F0F4EB40EC9A92497331CEE4F6BF6FF5469724B9D7171EEA91B98444DCDADB7BCF6DB3887627B731B810C0098680F29CCE6F1FF46CCFCC1E21BFB11A08628CDB08544C09CB5BA6964375BB539AC34E70BF72D4B5DD06E722F939055E03F5B0A132880DC3640768B8446C5318D9D9736F9BB38E9B3D0F97CF536C4480E64507591CDC6BDDA85DFDEEB5CA7550EA7D1DA57BAC5637F39287EDF741ED90085A34DA2F10067FEEC11A906DFC08C7BA6ADEF69DFF8E8541CD2A5FFA4674E508DC9834C9F41106015DB5B14F40D1802DE513828497B44882F3D75D9937EE4BF74B53343BF40630F78D735F5895C7C270597FC9807076A22A26EFA2AACC4AA3FDFE11DA43869023269CBC0304316B7BF29D905C98295B6AE34CDE69B3C3F6B9937C66771E668F4001C7837FC4F7C40718119209ACC68D4D23C1BA47E718A8CA83F3A1D964FE85DE701D3A958D941C799AA77EAB3F55270FFA7E1D6F85943B8BFE42F78EB1F0CABD03EA34C8F2601C95B005DDDB8BEBAA3E976E561744A6A1E98636DAE7D185F0C4067FB45128E6ED911DD0BB6DF9EF1DD158CFB5D4FD62FF008C6DB49A803DC0E5FC841394C02E2672A365DBE3D9378EABA0FCCBCD4911ED5195EB87F495ED46C9D8866B373404000C4A0CAED56379CA93B6A1845B79FA2F1010823D5E48324AD2B7A34A67CFBE280E36CD7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/KNDRRG+Shlop-Regular cguidfix
/F2.1/KNDRRG+Shlop-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
0 92 m
79 92 l
79 13 l
0 13 l
0 92 l
h
W*
0 0 79 92 rc
0 92 m
79 92 l
79 13 l
0 13 l
0 92 l
h
f
Q
4 w
0 0 0 sc
q
0 92 m
79 92 l
79 13 l
0 13 l
0 92 l
h
W*
0 0 79 92 rc
1 0 0 -1 0 92 cm
0 0 m
79 0 l
79 79 l
0 79 l
0 0 l
h
S
Q
0.098039217 0.098039217 0.098039217 sc
q
0 0 79 92 rc
1 0 0 -1 11.812102 78 cm
/F1.1[ 55 0 0 -55 0 0]sf
0 40 m
(!)s
0.80216306 0.087473094 0.0084824692 sc
1 0 0 -1 42 76 cm
/F2.1[ 65 0 0 -65 0 0]sf
0.02 59 m
(!)s
ep
end
